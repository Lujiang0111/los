#ifndef LOS_INCLUDE_LOS_SOCKS_H_
#define LOS_INCLUDE_LOS_SOCKS_H_

#include "los.h"

namespace los {
namespace socks {

/***************************************************************************//**
* 初始化套接字环境
* @note:    win下调用WSAStartup使用v2.2库,linux下实际无操作
 ******************************************************************************/
LOS_API void GlobalInit();

/***************************************************************************//**
* 反初始化套接字环境
* @note:    win下调用WSACleanup库，linux下实际无操作
 ******************************************************************************/
LOS_API void GlobalDeinit();

/***************************************************************************//**
* 获取最后一次错误信息
* @return   最后一次错误的错误码
 ******************************************************************************/
LOS_API int GetLastErrorCode();

/***************************************************************************//**
* 设置socket的阻塞模式
* fd        [in]    套接字
* is_block  [in]    是否为阻塞模式
* @return   true    设置成功
*           false   设置失败
 ******************************************************************************/
LOS_API bool SetBlockMode(int fd, bool is_block);

/***************************************************************************//**
* 设置socket的ttl值
* fd        [in]    套接字
* ttl       [in]    ttl值
* @return   true    设置成功
*           false   设置失败
 ******************************************************************************/
LOS_API bool SetTtl(int fd, int ttl);

/***************************************************************************//**
* 设置socket的keep alive值
* fd            [in]    套接字
* timeout_ms    [in]    keepalive的超时时间(单位毫秒),0代表关闭
* @return   true    设置成功
*           false   设置失败
 ******************************************************************************/
LOS_API bool SetKeepAlive(int fd, int timeout_ms);

}   // namespace socks
}   // namespace los

#endif // !LOS_INCLUDE_LOS_SOCKS_H_
